import os
import asyncio

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext

from create_bot import dp, bot, db
from dicts.messages import commands_dict
from func.all_func import delete_temp_file
from keyboards.inline_initiate_vacation import yes_no_keyboard, start_sending_vacation_email_keyboard, \
    start_sending_vacation_email_keyboard_o
from keyboards.inline_type_of_employement import type_of_employement_kb
from mailing.mailing import send_vacation_email
from States.states import FSM_send_vacation_email, FSM_type_of_employment


# @dp.callback_query_handler(lambda c: c.data.startswith("vacation"), state=None)
async def vacation(callback_query: types.CallbackQuery):
    type_of_employment = db.what_type_of_employment(callback_query.from_user.id)
    if type_of_employment:
        if type_of_employment == "—à—Ç–∞—Ç":
            if callback_query.data.split(" ")[1] == "more":
                await callback_query.answer()
                await callback_query.message.answer(commands_dict["vacation"]["vacation_more_two_weeks"],
                                                    reply_markup=start_sending_vacation_email_keyboard,
                                                    parse_mode=types.ParseMode.HTML)
            elif callback_query.data.split(" ")[1] == "less":
                await callback_query.answer()
                await callback_query.message.answer(commands_dict["vacation"]["vacation_less_two_weeks"],
                                                    reply_markup=start_sending_vacation_email_keyboard_o,
                                                    parse_mode=types.ParseMode.HTML)
        else:
            if callback_query.data.split(" ")[1] == "more":
                await callback_query.answer()
                await callback_query.message.answer(commands_dict["vacation"]["vacation_more_two_weeks_not_state"],
                                                    parse_mode=types.ParseMode.HTML)
            elif callback_query.data.split(" ")[1] == "less":
                await callback_query.answer()
                await callback_query.message.answer(commands_dict["vacation"]["vacation_less_two_weeks_not_state"],
                                                    reply_markup=start_sending_vacation_email_keyboard_o,
                                                    parse_mode=types.ParseMode.HTML)
        if callback_query.data.split(" ")[1] == "pay_info":
            await callback_query.answer()
            await callback_query.message.answer(commands_dict["vacation"]["vacation_pay"],
                                                parse_mode=types.ParseMode.HTML)
    else:
        await FSM_type_of_employment.change_type_of_employment.set()
        await callback_query.message.answer("–Ø –Ω–µ –Ω–∞—à–µ–ª –≤ —Å–≤–æ–µ–π –±–∞–∑–µ —Ç–∏–ø —Ç–≤–æ–µ–π –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –≤ –∫–æ–º–ø–∞–Ω–∏–∏ –¢–∏–º—Ñ–æ—Ä—Å.\n"
                                            "–£–∫–∞–∂–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ç—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω –≤ —à—Ç–∞—Ç –∏–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—à—å –ø–æ –ò–ü/–°–ó/–ì–ü–• ?",
                                            reply_markup=type_of_employement_kb,
                                            parse_mode=types.ParseMode.HTML)


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –ø–∏—Å—å–º–∞ –æ–± –æ—Ç–ø—É—Å–∫–µ ----------------------------------------------------------------------------

# @dp.callback_query_handler(lambda c: c.data.startswith("initiate"), state=None)
async def initiate_vacation_email(callback_query: types.CallbackQuery, state=None):
    await callback_query.answer()
    user = db.find_by_tg_id(callback_query.from_user.id)
    user_department = db.find_department_obj_by_user_id(user.id)
    if not user_department:
        await callback_query.message.answer("–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω –æ—Ç–¥–µ–ª —Ä–∞–±–æ—Ç—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    superviser_id = db.find_superviser(user_department.id)
    superviser = db.find_user_by_id(superviser_id)
    superviser_name = f"{superviser.surname} {superviser.first_name} {superviser.middle_name}"
    superviser_mail = db.find_email_by_user_id(superviser_id)
    sender_tg_id = callback_query.from_user.id
    sender = db.find_contacts_by_tg_id(sender_tg_id)
    async with state.proxy() as data:
        data["from_tg_id"] = sender_tg_id
        data["from_name"] = sender["first_name"]
        data["from_surname"] = sender["surname"]
        data["job_title"] = sender["job_title"]
        data["superviser_mail"] = superviser_mail
        data["superviser_name"] = superviser_name
    await FSM_send_vacation_email.enter_vacation_period.set()
    await bot.send_message(chat_id=callback_query.from_user.id, text="–í –∫–∞–∫–∏–µ —Å—Ä–æ–∫–∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –æ—Ç–ø—É—Å–∫?: ")


# @dp.message_handler(state=FSM_send_vacation_email.enter_vacation_period)
async def save_vacaton_period(message: types.Message, state=FSMContext):
    await FSM_send_vacation_email.is_agreed.set()
    async with state.proxy() as data:
        data["vacation_period"] = message.text
    await bot.send_message(chat_id=message.from_user.id, text="–û—Ç–ø—É—Å–∫ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω —Å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º?: ",
                           reply_markup=yes_no_keyboard)


# @dp.callback_query_handler(lambda c: c.data.startswith("answer"), state=FSM_send_vacation_email.is_agreed)
async def save_is_agreed(callback_query: types.CallbackQuery, state=FSMContext):
    if callback_query.data.split(" ")[1] == "yes":
        await callback_query.answer()
        await FSM_send_vacation_email.enter_coordinator.set()
        await bot.send_message(chat_id=callback_query.from_user.id,
                               text="–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —á–µ—Ä–µ–∑ —Å–∫—Ä–µ–ø–∫—É üìé —Ñ–æ—Ç–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –∑–∞—è–≤–ª–µ–Ω–∏—è –Ω–∞ –æ—Ç–ø—É—Å–∫,\n"
                                    "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ñ–æ—Ç–æ —Ö–æ—Ä–æ—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –¥–æ–∫—É–º–µ–Ω—Ç –ª–µ–≥–∫–æ —á–∏—Ç–∞–µ—Ç—Å—è\n"
                                    "–î–æ–∫—É–º–µ–Ω—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –æ—Ç–¥–µ–ª –∫–∞–¥—Ä–æ–≤")
    else:
        await state.finish()
        await bot.send_message(chat_id=callback_query.from_user.id,
                               text="üö´ –ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞—è–≤–ª–µ–Ω–∏—è –æ—Ç–ø—É—Å–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–¥–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å. üö´\n"
                                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–≥–ª–∞—Å—É–π—Ç–µ –æ—Ç–ø—É—Å–∫ —Å–æ —Å–≤–æ–∏–º —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º")


# @dp.message_handler(content_types="photo", state=FSM_send_vacation_email.enter_coordinator)
async def save_coordinator(message: types.Message, state=FSMContext):
    await FSM_send_vacation_email.commit_data.set()
    async with state.proxy() as data:
        destination = os.getcwd() + "/temp_saves/" + data["from_name"] + "_" + data["from_surname"] + ".jpg"
        await message.photo[-1].download(destination_file=destination)
        data["image_path"] = destination
    text = "<b>–ó–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ—Ç–ø—É—Å–∫</b>\n" \
           f"<b>–û—Ç:</b> {data['from_surname']} {data['from_name']}\n" \
           f"<b>–î–∞—Ç—ã –æ—Ç–ø—É—Å–∫–∞:</b> {data['vacation_period']}\n" \
           f"<b>–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:</b> {data['superviser_name']}\n" \
           f"<b>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {data['image_path'].split('/')[2]}</b>\n\n" \
           f"–ü–∏—Å—å–º–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –æ—Ç–¥–µ–ª –∫–∞–¥—Ä–æ–≤ –∏ –≤–∞—à–µ–º—É —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é\n" \
           f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º ?"
    await message.answer("–í–æ—Ç —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å:\n\n"
                         f"{text}", parse_mode=types.ParseMode.HTML, reply_markup=yes_no_keyboard)


# @dp.message_handler(state=FSM_send_vacation_email.enter_coordinator)
async def waiting_for_photo(message: types.Message):
    await message.answer("–Ø –∂–¥—É —Ñ–∞–∏–ª–∞ —Å —Ñ–æ—Ç–æ –∑–∞—è–≤–ª–µ–Ω–∏—è –Ω–∞ –æ—Ç–ø—É—Å–∫\n"
                         "–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ —Å–∫—Ä–µ–ø–∫—É üìé –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /stop –¥–ª—è –≤—ã—Ö–æ–¥–∞")


# @dp.callback_query_handler(lambda c: c.data.startswith("answer"), state=FSM_send_vacation_email.commit_data)
async def commit_data(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    if callback_query.data.split(" ")[1] == "yes":
        await callback_query.message.answer("–û—Ç–ø—Ä–∞–≤–ª—è—é –ø–∏—Å—å–º–æ ...")
        async with state.proxy() as data:
            from_name = data["from_name"]
            from_surname = data["from_surname"]
            job_title = data["job_title"]
            vacation_period = data["vacation_period"]
            coordinator_name = data["superviser_name"]
            image_path = data["image_path"]
            superviser_mail = [data["superviser_mail"]]
        is_ok = asyncio.create_task(send_vacation_email(from_name=from_name,
                                                        from_surname=from_surname,
                                                        job_title=job_title,
                                                        vacation_period=vacation_period,
                                                        coordinator_name=coordinator_name,
                                                        superviser_email=superviser_mail,
                                                        image_path=image_path))
        if is_ok:
            text = f"–í–∞—à–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ—Ç–ø—É—Å–∫ –≤ –ø–µ—Ä–∏–æ–¥ {data['vacation_period']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É"
            await asyncio.sleep(3)
            await asyncio.create_task(delete_temp_file(data["image_path"]))
        else:
            text = is_ok
        await bot.send_message(chat_id=callback_query.message.from_user.id, text=text)
        await state.finish()
    elif callback_query.data.split(" ")[1] == "no":
        async with state.proxy() as data:
            await asyncio.create_task(delete_temp_file(data["image_path"]))
        await callback_query.message.answer("–í—ã—Ö–æ–∂—É –∏—Ö —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–ª–µ–Ω–∏—è –Ω–∞ –æ—Ç–ø—É—Å–∫")


def register_handlers_vacation(dp: Dispatcher):
    dp.register_callback_query_handler(vacation, lambda c: c.data.startswith("vacation"), state=None)
    dp.register_callback_query_handler(initiate_vacation_email, lambda c: c.data.startswith("initiate"), state=None)
    dp.register_message_handler(save_vacaton_period, state=FSM_send_vacation_email.enter_vacation_period)
    dp.register_callback_query_handler(save_is_agreed, lambda c: c.data.startswith("answer"),
                                       state=FSM_send_vacation_email.is_agreed)
    dp.register_message_handler(waiting_for_photo, state=FSM_send_vacation_email.enter_coordinator)
    dp.register_message_handler(save_coordinator, content_types="photo",
                                state=FSM_send_vacation_email.enter_coordinator)
    dp.register_callback_query_handler(commit_data,
                                       lambda c: c.data.startswith("answer"), state=FSM_send_vacation_email.commit_data)

