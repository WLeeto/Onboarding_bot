import os

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.utils.exceptions import WrongFileIdentifier, CantInitiateConversation
from transliterate import translit

from States.states import FSM_newbie_questioning
from create_bot import bot, dp, db
from dicts.messages import message_dict, operator_list
from func.all_func import validate_email, validate_phone, validate_bday, is_latin
from keyboards.inline_newbie_questioning import change_newbie_questioning
from keyboards.inline_operator import confirm_new_user
from keyboards.inline_start_survey import Survey_inlines_keyboards


# @dp.callback_query_handler(lambda c: c.data == "start",
#                            state=FSM_newbie_questioning.newbie_questioning_start)
async def questioning_start(callback_query: types.CallbackQuery, state: FSMContext):
    msg_todel = await callback_query.message.answer("–í–≤–µ–¥–∏ —Å–≤–æ–µ –§–ò–û (–ù–∞–ø—Ä–∏–º–µ—Ä: –ü—É–ø–∫–∏–Ω –ò–≤–∞–Ω –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á):")
    async with state.proxy() as data:
        data["to_delete"] = []
        data["to_delete"].append(msg_todel.message_id)
    await FSM_newbie_questioning.next()


# @dp.message_handler(state=FSM_newbie_questioning.asking_surname)
async def load_surname(message: types.Message, state: FSMContext):
    try:
        name = message.text.split(" ")[1]
        surname = message.text.split(" ")[0]
        patronymic = message.text.split(" ")[2]
        if is_latin(message.text):
            await FSM_newbie_questioning.next()
            keyboard = Survey_inlines_keyboards()
            msg_todel = await message.answer("–Ø –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–ø–∏—Å–∞–ª —Ç–≤–æ—é —Ñ–∞–º–∏–ª–∏—é –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º?:\n"
                                             f"<b>{translit(surname, language_code='ru', reversed=True)}</b>\n"
                                             "–≠—Ç–∞ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—á—Ç—ã", parse_mode="html",
                                             reply_markup=keyboard.is_ok())
            async with state.proxy() as data:
                data["name"] = name
                data["patronymic"] = patronymic
                data["surname"] = surname
                data["tg_id"] = message.from_id
                data["tg_name"] = message.from_user.username
                data["to_delete"].append(msg_todel.message_id)
                data["to_delete"].append(message.message_id)
        else:
            msg_todel = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ–µ –§–ò–û –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ")
            async with state.proxy() as data:
                data["to_delete"].append(msg_todel.message_id)
                data["to_delete"].append(message.message_id)
    except IndexError:
        msg_todel = await message.answer("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —Ñ–∞–º–∏–ª–∏—é, –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ, —Ç—Ä–∏ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n"
                                         "–í–≤–µ–¥–∏ —Å–≤–æ–µ –§–ò–û (–ù–∞–ø—Ä–∏–º–µ—Ä: –ü—É–ø–∫–∏–Ω –ò–≤–∞–Ω –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á):")
        async with state.proxy() as data:
            data["to_delete"].append(msg_todel.message_id)
            data["to_delete"].append(message.message_id)


# @dp.callback_query_handler(lambda c: c.data.startswith("answer"),
#                            state=FSM_newbie_questioning.email_creating)
async def email_confirming(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data.split(" ")[1] == "correct":
        msg_todel = await bot.send_message(callback_query.from_user.id,
                                           "–í–≤–µ–¥–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç dd.mm.yyyy): ")
        await FSM_newbie_questioning.asking_bday.set()
        async with state.proxy() as data:
            data["surname_eng"] = translit(data["surname"], language_code='ru', reversed=True)
            data["to_delete"].append(msg_todel.message_id)
    else:
        await FSM_newbie_questioning.asking_surname_eng.set()
        msg_todel = await bot.send_message(callback_query.from_user.id, "–û–∫, —Ç–æ–≥–¥–∞ –≤–≤–µ–¥–∏ —Ñ–∞–º–∏–ª–∏—é –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:")
        async with state.proxy() as data:
            data["to_delete"].append(msg_todel.message_id)


# @dp.message_handler(state=FSM_newbie_questioning.asking_surname_eng)
async def load_eng_surname(message: types.Message, state: FSMContext):
    await FSM_newbie_questioning.next()
    msg_todel = await message.answer("–í–≤–µ–¥–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç dd.mm.yyyy): ")
    async with state.proxy() as data:
        data["surname_eng"] = message.text
        data["to_delete"].append(msg_todel.message_id)
        data["to_delete"].append(message.message_id)


# @dp.message_handler(state=FSM_newbie_questioning.asking_bday)
async def load_bdate(message: types.Message, state: FSMContext):
    validator = validate_bday(message.text)
    if validator:
        await FSM_newbie_questioning.next()
        msg_todel = await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏ (—Ñ–æ—Ä–º–∞—Ç 7 –•–•–• –•–•–• –•–•–•–•): ")
        async with state.proxy() as data:
            data["bdate"] = validator
            data["to_delete"].append(msg_todel.message_id)
            data["to_delete"].append(message.message_id)
    else:
        msg_todel = await message.answer("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.mm.yyyy\n"
                                         "(–ù–∞–ø—Ä–∏–º–µ—Ä 28.07.1989)\n"
                                         "–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º –Ω–∞ 15 –ª–µ—Ç –º–ª–∞–¥—à–µ —Ç–µ–∫—É—â–µ–π")
        async with state.proxy() as data:
            data["to_delete"].append(msg_todel.message_id)
            data["to_delete"].append(message.message_id)


# @dp.message_handler(state=FSM_newbie_questioning.asking_phone)
async def load_phone(message: types.Message, state: FSMContext):
    validator = validate_phone(message.text)
    if validator:
        await FSM_newbie_questioning.next()
        msg_todel = await message.answer("–£–∫–∞–∂–∏ —Å–≤–æ–π e-mail (–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤): ")
        async with state.proxy() as data:
            data["phone"] = validator
            data["to_delete"].append(msg_todel.message_id)
            data["to_delete"].append(message.message_id)
    else:
        msg_todel = await message.answer("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ 7 –•–•–• –•–•–• –•–•–•–•\n"
                                         "–ù–∞–ø—Ä–∏–º–µ—Ä 7 917 233 4567")
        async with state.proxy() as data:
            data["to_delete"].append(msg_todel.message_id)
            data["to_delete"].append(message.message_id)


# @dp.message_handler(state=FSM_newbie_questioning.asking_email)
async def load_email(message: types.Message, state: FSMContext):
    validator = validate_email(message.text)
    if validator:
        await FSM_newbie_questioning.next()
        msg_todel = await message.answer("–ó–∞–≥—Ä—É–∑–∏ —Å–≤–æ–µ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ —Å–∫—Ä–µ–ø–∫—É üìé. "
                                         "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ —Ç–≤–æ–µ–π –∫–∞—Ä—Ç–æ—á–∫–µ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –æ–±—â–µ–º —á–∞—Ç–µ."
                                         " –ë—É–¥–µ—Ç –æ—Ç–ª–∏—á–Ω–æ, –µ—Å–ª–∏ –æ–Ω–∞ –±—É–¥–µ—Ç –≤ –¥–µ–ª–æ–≤–æ–º —Å—Ç–∏–ª–µ.")
        async with state.proxy() as data:
            data["email"] = message.text
            data["to_delete"].append(msg_todel.message_id)
            data["to_delete"].append(message.message_id)
    else:
        msg_todel = await message.answer("–ü–æ—á—Ç–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.\n"
                                         "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø–æ—á—Ç—É:")
        async with state.proxy() as data:
            data["to_delete"].append(msg_todel.message_id)
            data["to_delete"].append(message.message_id)


# @dp.message_handler(content_types="photo", state=FSM_newbie_questioning.asking_photo)
async def load_photo(message: types.Message, state: FSMContext):
    await FSM_newbie_questioning.next()
    destination = os.getcwd() + "/saved_files/tg_photos/" + str(message.from_id) + ".jpg"
    await message.photo[-1].download(destination_file=destination)
    msg_todel = await message.answer("–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–∏—Ö —Ö–æ–±–±–∏ –∏ —É–≤–ª–µ—á–µ–Ω–∏—è—Ö. "
                                     "–ß–µ–º –ª—é–±–∏—à—å –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è? –ß—Ç–æ —Ç–µ–±—è –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç –∏ –¥–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏—é?\n"
                                     "–ü–∏—à–∏ –æ —Å–µ–±–µ –≤—Å–µ, —á–µ–º —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –∫–æ–ª–ª–µ–≥–∞–º–∏! "
                                     "–¢–∞–∫ –±—É–¥–µ—Ç –±—ã—Å—Ç—Ä–µ–µ –Ω–∞–π—Ç–∏ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤ –∏ –¥—Ä—É–∑–µ–πüòä")
    async with state.proxy() as data:
        data["tg_photo_path"] = destination
        data["photo"] = message.photo[-1].file_id
        data["to_delete"].append(msg_todel.message_id)
        data["to_delete"].append(message.message_id)


# @dp.message_handler(state=FSM_newbie_questioning.asking_photo)
async def waiting_for_photo(message: types.Message, state: FSMContext):
    msg_todel = await message.answer("–ó–∞–≥—Ä—É–∑–∏ —Å–≤–æ–µ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ —Å–∫—Ä–µ–ø–∫—É üìé. "
                                     "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ —Ç–≤–æ–µ–π –∫–∞—Ä—Ç–æ—á–∫–µ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –æ–±—â–µ–º —á–∞—Ç–µ."
                                     " –ë—É–¥–µ—Ç –æ—Ç–ª–∏—á–Ω–æ, –µ—Å–ª–∏ –æ–Ω–∞ –±—É–¥–µ—Ç –≤ –¥–µ–ª–æ–≤–æ–º —Å—Ç–∏–ª–µ.")
    async with state.proxy() as data:
        data["to_delete"].append(msg_todel.message_id)
        data["to_delete"].append(message.message_id)


# @dp.message_handler(state=FSM_newbie_questioning.asking_hobby)
async def load_hobby(message: types.Message, state: FSMContext):
    keyboard = Survey_inlines_keyboards()
    async with state.proxy() as data:
        data["hobby"] = message.text
    await FSM_newbie_questioning.next()
    await bot.delete_message(message.from_id, message.message_id)
    for i in data["to_delete"]:
        await bot.delete_message(message.from_id, i)
    await message.answer_photo(data["photo"], '–ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å:\n\n'
                                              f'{data["surname"]} {data["name"]} {data["patronymic"]}\n'
                                              f'–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data["bdate"].strftime("%d.%m.%Y")}\n'
                                              f'–¢–µ–ª–µ—Ñ–æ–Ω: +{data["phone"]}\n'
                                              f'E-mail: {data["email"]}\n'
                                              f'–•–æ–±–±–∏ –∏ —É–≤–ª–µ—á–µ–Ω–∏—è: {data["hobby"]}')
    buttons_to_remove = await message.answer("–í—Å–µ –≤–µ—Ä–Ω–æ?", reply_markup=keyboard.is_ok())
    async with state.proxy() as data:
        data["buttons_to_remove"] = buttons_to_remove.message_id
        data["to_delete"] = []


# @dp.callback_query_handler(lambda c: c.data.startswith("answer"), state=FSM_newbie_questioning.commit_data)
async def commit_data(callback_query: types.CallbackQuery, state: FSMContext):
    keyboard = Survey_inlines_keyboards()
    if callback_query.data.split(" ")[1] == "correct":
        async with state.proxy() as data:
            db.add_newbie_for_confirming(
                tg_id=data["tg_id"],
                first_name=data["name"],
                surname=data["surname"],
                middle_name=data["patronymic"],
                tg_name=data["tg_name"],
                date_of_birth=data["bdate"],
                phone=data["phone"],
                email=data["email"],
                tg_photo=data["tg_photo_path"],
                hobby=data["hobby"]
            )
            try:
                await bot.send_photo(operator_list[0], data["photo"],
                                     '–ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n'
                                     f'tg_id: {callback_query.from_user.id}\n'
                                     f'{data["surname"]} {data["name"]} {data["patronymic"]}\n'
                                     f'–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data["bdate"]}\n'
                                     f'–¢–µ–ª–µ—Ñ–æ–Ω: +{data["phone"]}\n'
                                     f'E-mail: {data["email"]}\n'
                                     f'–•–æ–±–±–∏ –∏ —É–≤–ª–µ—á–µ–Ω–∏—è: {data["hobby"]}',
                                     reply_markup=confirm_new_user(data["tg_id"]))
            except CantInitiateConversation:
                await callback_query.message.answer("–û–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ —Å–º–æ–≥ –æ—Ç–≤–µ—Ç–∏—Ç—å, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –Ω–∞—á–∞–ª —á–∞—Ç —Å –±–æ—Ç–æ–º.\n"
                                                    "–ü–µ—Ä–µ—à–ª–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —ç—Ç—É –æ—à–∏–±–∫—É –æ—Ç–¥–µ–ª—É –∫–∞–¥—Ä–æ–≤")
        await FSM_newbie_questioning.next()
        await bot.edit_message_text("–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É",
                                    callback_query.from_user.id,
                                    data["buttons_to_remove"])
        await bot.send_message(callback_query.from_user.id, "–°–µ–π—á–∞—Å –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è 2 –º–∏–Ω—É—Ç—ã –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏üòÖ"
                                                            "–í –∫–æ—Ä–æ—Ç–∫–æ–º –≤–∏–¥–µ–æ –º—ã —Ä–∞—Å—Å–∫–∞–∂–µ–º, –∫—Ç–æ —Ç–∞–∫–∏–µ –¢–ò–ú –§–û–†–°–ï–†–´, "
                                                            "–∞ —Ç–∞–∫ –∂–µ –∫–æ–º—É –∏ –ø–æ –∫–∞–∫–∏–º –≤–æ–ø—Ä–æ—Å–∞–º –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è!\n"
                                                            "–ù–∞—á–Ω–µ–º? –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞üòä",
                               reply_markup=keyboard.ok_keyboard())
    else:
        async with state.proxy() as data:
            message_to_edit = data["buttons_to_remove"]
        await bot.edit_message_text("–£–∫–∞–∂–∏—Ç–µ —á—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?",
                                    chat_id=callback_query.from_user.id,
                                    message_id=message_to_edit,
                                    reply_markup=change_newbie_questioning)


# @dp.callback_query_handler(lambda c: c.data.startswith("change"), state=FSM_newbie_questioning.commit_data)
async def change_questoning_data(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    if callback_query.data.split(" ")[1] == "name":
        await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
        msg_todel = await callback_query.message.answer("–í–≤–µ–¥–∏ —Å–≤–æ–µ –§–ò–û (–ù–∞–ø—Ä–∏–º–µ—Ä: –ü—É–ø–∫–∏–Ω –ò–≤–∞–Ω –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á):")
        async with state.proxy() as data:
            data["to_delete"] = []
            data["to_delete"].append(msg_todel.message_id)
        await FSM_newbie_questioning.change_name.set()
    elif callback_query.data.split(" ")[1] == "birth":
        await FSM_newbie_questioning.change_bday.set()
        last_message = await callback_query.message.answer("–í–≤–µ–¥–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç dd.mm.yyyy): ")
        async with state.proxy() as data:
            data["last_message"] = last_message
    elif callback_query.data.split(" ")[1] == "phone":
        await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
        msg_todel = await callback_query.message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏ (—Ñ–æ—Ä–º–∞—Ç 7 –•–•–• –•–•–• –•–•–•–•): ")
        await FSM_newbie_questioning.change_phone.set()
        async with state.proxy() as data:
            data["to_delete"] = []
            data["to_delete"].append(msg_todel.message_id)
    elif callback_query.data.split(" ")[1] == "e-mail":
        await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
        msg_todel = await callback_query.message.answer("–£–∫–∞–∂–∏ —Å–≤–æ–π e-mail (–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤): ")
        await FSM_newbie_questioning.change_email.set()
        async with state.proxy() as data:
            data["to_delete"] = []
            data["to_delete"].append(msg_todel.message_id)
    elif callback_query.data.split(" ")[1] == "hobbie":
        await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
        msg_todel = await callback_query.message.answer("–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–∏—Ö —Ö–æ–±–±–∏ –∏ —É–≤–ª–µ—á–µ–Ω–∏—è—Ö. "
                                                        "–ß–µ–º –ª—é–±–∏—à—å –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è? –ß—Ç–æ —Ç–µ–±—è –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç "
                                                        "–∏ –¥–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏—é?\n"
                                                        "–ü–∏—à–∏ –æ —Å–µ–±–µ –≤—Å–µ, —á–µ–º —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –∫–æ–ª–ª–µ–≥–∞–º–∏! "
                                                        "–¢–∞–∫ –±—É–¥–µ—Ç –±—ã—Å—Ç—Ä–µ–µ –Ω–∞–π—Ç–∏ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤ –∏ –¥—Ä—É–∑–µ–πüòä")
        await FSM_newbie_questioning.change_hobbie.set()
        async with state.proxy() as data:
            data["to_delete"] = []
            data["to_delete"].append(msg_todel.message_id)


# @dp.message_handler(state=FSM_newbie_questioning.change_hobbie)
async def change_hobbie(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["hobby"] = message.text
        data["to_delete"].append(message.message_id)
        data["tg_id"] = message.from_id
        data["tg_name"] = message.from_user.username
    keyboard = Survey_inlines_keyboards()
    await bot.delete_message(message.from_id, message.message_id)
    await message.answer_photo(data["photo"], '–ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å:\n\n'
                                              f'{data["surname"]} {data["name"]} {data["patronymic"]}\n'
                                              f'–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data["bdate"].strftime("%d.%m.%Y")}\n'
                                              f'–¢–µ–ª–µ—Ñ–æ–Ω: +{data["phone"]}\n'
                                              f'E-mail: {data["email"]}\n'
                                              f'–•–æ–±–±–∏ –∏ —É–≤–ª–µ—á–µ–Ω–∏—è: {data["hobby"]}')
    buttons_to_remove = await message.answer("–í—Å–µ –≤–µ—Ä–Ω–æ?", reply_markup=keyboard.is_ok())
    async with state.proxy() as data:
        data["buttons_to_remove"] = buttons_to_remove.message_id
        data["to_delete"] = []
    await FSM_newbie_questioning.commit_data.set()


# @dp.message_handler(state=FSM_newbie_questioning.change_email)
async def change_email(message: types.Message, state: FSMContext):
    validator = validate_email(message.text)
    if validator:
        async with state.proxy() as data:
            data["email"] = message.text
            data["to_delete"].append(message.message_id)
            data["tg_id"] = message.from_id
            data["tg_name"] = message.from_user.username
        keyboard = Survey_inlines_keyboards()
        await bot.delete_message(message.from_id, message.message_id)
        await message.answer_photo(data["photo"], '–ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å:\n\n'
                                                  f'{data["surname"]} {data["name"]} {data["patronymic"]}\n'
                                                  f'–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data["bdate"].strftime("%d.%m.%Y")}\n'
                                                  f'–¢–µ–ª–µ—Ñ–æ–Ω: +{data["phone"]}\n'
                                                  f'E-mail: {data["email"]}\n'
                                                  f'–•–æ–±–±–∏ –∏ —É–≤–ª–µ—á–µ–Ω–∏—è: {data["hobby"]}')
        buttons_to_remove = await message.answer("–í—Å–µ –≤–µ—Ä–Ω–æ?", reply_markup=keyboard.is_ok())
        async with state.proxy() as data:
            data["buttons_to_remove"] = buttons_to_remove.message_id
            data["to_delete"] = []
        await FSM_newbie_questioning.commit_data.set()
    else:
        msg_todel = await message.answer("–ü–æ—á—Ç–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.\n"
                                         "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø–æ—á—Ç—É:")
        async with state.proxy() as data:
            data["to_delete"].append(msg_todel.message_id)
            data["to_delete"].append(message.message_id)


# @dp.message_handler(state=FSM_newbie_questioning.change_phone)
async def change_phone(message: types.Message, state: FSMContext):
    validator = validate_phone(message.text)
    if validator:
        async with state.proxy() as data:
            data["phone"] = validator
            data["to_delete"].append(message.message_id)
            data["tg_id"] = message.from_id
            data["tg_name"] = message.from_user.username
        keyboard = Survey_inlines_keyboards()
        await bot.delete_message(message.from_id, message.message_id)
        await message.answer_photo(data["photo"], '–ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å:\n\n'
                                                  f'{data["surname"]} {data["name"]} {data["patronymic"]}\n'
                                                  f'–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data["bdate"].strftime("%d.%m.%Y")}\n'
                                                  f'–¢–µ–ª–µ—Ñ–æ–Ω: +{data["phone"]}\n'
                                                  f'E-mail: {data["email"]}\n'
                                                  f'–•–æ–±–±–∏ –∏ —É–≤–ª–µ—á–µ–Ω–∏—è: {data["hobby"]}')
        buttons_to_remove = await message.answer("–í—Å–µ –≤–µ—Ä–Ω–æ?", reply_markup=keyboard.is_ok())
        async with state.proxy() as data:
            data["buttons_to_remove"] = buttons_to_remove.message_id
            data["to_delete"] = []
        await FSM_newbie_questioning.commit_data.set()
    else:
        msg_todel = await message.answer("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ 7 –•–•–• –•–•–• –•–•–•–•\n"
                                         "–ù–∞–ø—Ä–∏–º–µ—Ä 7 917 233 4567")
        async with state.proxy() as data:
            data["to_delete"].append(msg_todel.message_id)
            data["to_delete"].append(message.message_id)


# @dp.message_handler(state=FSM_newbie_questioning.change_name)
async def change_name(message: types.Message, state: FSMContext):
    if is_latin(message.text):
        try:
            name = message.text.split(" ")[1]
            surname = message.text.split(" ")[0]
            patronymic = message.text.split(" ")[2]
            async with state.proxy() as data:
                data["name"] = name
                data["patronymic"] = patronymic
                data["surname"] = surname
                data["tg_id"] = message.from_id
                data["tg_name"] = message.from_user.username
                data["to_delete"].append(message.message_id)

            keyboard = Survey_inlines_keyboards()
            await bot.delete_message(message.from_id, message.message_id)
            await message.answer_photo(data["photo"], '–ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å:\n\n'
                                                      f'{data["surname"]} {data["name"]} {data["patronymic"]}\n'
                                                      f'–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data["bdate"].strftime("%d.%m.%Y")}\n'
                                                      f'–¢–µ–ª–µ—Ñ–æ–Ω: +{data["phone"]}\n'
                                                      f'E-mail: {data["email"]}\n'
                                                      f'–•–æ–±–±–∏ –∏ —É–≤–ª–µ—á–µ–Ω–∏—è: {data["hobby"]}')
            buttons_to_remove = await message.answer("–í—Å–µ –≤–µ—Ä–Ω–æ?", reply_markup=keyboard.is_ok())
            async with state.proxy() as data:
                data["buttons_to_remove"] = buttons_to_remove.message_id
                data["to_delete"] = []
            await FSM_newbie_questioning.commit_data.set()
        except IndexError:
            msg_todel = await message.answer("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —Ñ–∞–º–∏–ª–∏—é, –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ, —Ç—Ä–∏ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n"
                                             "–í–≤–µ–¥–∏ —Å–≤–æ–µ –§–ò–û (–ù–∞–ø—Ä–∏–º–µ—Ä: –ü—É–ø–∫–∏–Ω –ò–≤–∞–Ω –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á):")
            async with state.proxy() as data:
                data["to_delete"].append(msg_todel.message_id)
                data["to_delete"].append(message.message_id)
    else:
        msg_todel = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ–µ –§–ò–û –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ")
        async with state.proxy() as data:
            data["to_delete"].append(msg_todel.message_id)
            data["to_delete"].append(message.message_id)


# @dp.message_handler(state=FSM_newbie_questioning.change_bday)
async def change_bday(message: types.Message, state: FSMContext):
    validator = validate_bday(message.text)
    if validator:
        async with state.proxy() as data:
            data["bdate"] = validator
            data["to_delete"].append(message.message_id)
            data["tg_id"] = message.from_id
            data["tg_name"] = message.from_user.username
        keyboard = Survey_inlines_keyboards()
        await bot.delete_message(message.from_id, message.message_id)
        await message.answer_photo(data["photo"], '–ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å:\n\n'
                                                  f'{data["surname"]} {data["name"]} {data["patronymic"]}\n'
                                                  f'–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data["bdate"].strftime("%d.%m.%Y")}\n'
                                                  f'–¢–µ–ª–µ—Ñ–æ–Ω: +{data["phone"]}\n'
                                                  f'E-mail: {data["email"]}\n'
                                                  f'–•–æ–±–±–∏ –∏ —É–≤–ª–µ—á–µ–Ω–∏—è: {data["hobby"]}')
        buttons_to_remove = await message.answer("–í—Å–µ –≤–µ—Ä–Ω–æ?", reply_markup=keyboard.is_ok())
        async with state.proxy() as data:
            data["buttons_to_remove"] = buttons_to_remove.message_id
            data["to_delete"] = []
        await FSM_newbie_questioning.commit_data.set()
    else:
        msg_todel = await message.answer("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.mm.yyyy\n"
                                         "(–ù–∞–ø—Ä–∏–º–µ—Ä 28.07.1989)\n"
                                         "–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º –Ω–∞ 15 –ª–µ—Ç –º–ª–∞–¥—à–µ —Ç–µ–∫—É—â–µ–π")
        async with state.proxy() as data:
            data["to_delete"].append(msg_todel.message_id)
            data["to_delete"].append(message.message_id)


# @dp.callback_query_handler(lambda c: c.data == "start", state=FSM_newbie_questioning.show_video)
async def show_video(callback_query: types.CallbackQuery, state: FSMContext):
    keyboard = Survey_inlines_keyboards()
    await state.finish()
    try:
        await bot.send_video(callback_query.from_user.id, message_dict["greeting_video_id"])
    except WrongFileIdentifier as ex:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ:\n"
              f"{ex}")
    await bot.send_message(callback_query.from_user.id,
                           "–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –ø–æ–±–æ–ª—å—à–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π –æ —Ä–∞–±–æ—Ç–µ –¢–ò–ú –§–û–†–°?\n"
                           "–ì–æ—Ç–æ–≤ –ø—Ä–æ–π—Ç–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø—Ä–æ—Å?",
                           reply_markup=keyboard.start_survey())


# ----------------------------------------------------------------------------------------------------------------------

def register_handlers_newbie_questioning(dp: Dispatcher):
    dp.register_callback_query_handler(questioning_start, lambda c: c.data == "start",
                                       state=FSM_newbie_questioning.newbie_questioning_start)
    dp.register_message_handler(load_surname, state=FSM_newbie_questioning.asking_surname)
    dp.register_callback_query_handler(email_confirming, lambda c: c.data.startswith("answer"),
                                       state=FSM_newbie_questioning.email_creating)
    dp.register_message_handler(load_eng_surname, state=FSM_newbie_questioning.asking_surname_eng)
    dp.register_message_handler(load_bdate, state=FSM_newbie_questioning.asking_bday)
    dp.register_message_handler(load_phone, state=FSM_newbie_questioning.asking_phone)
    dp.register_message_handler(load_email, state=FSM_newbie_questioning.asking_email)
    dp.register_message_handler(load_photo, content_types="photo", state=FSM_newbie_questioning.asking_photo)
    dp.register_message_handler(waiting_for_photo, state=FSM_newbie_questioning.asking_photo)
    dp.register_message_handler(load_hobby, state=FSM_newbie_questioning.asking_hobby)
    dp.register_callback_query_handler(commit_data,
                                       lambda c: c.data.startswith("answer"), state=FSM_newbie_questioning.commit_data)
    dp.register_callback_query_handler(show_video, lambda c: c.data == "start", state=FSM_newbie_questioning.show_video)

    dp.register_callback_query_handler(change_questoning_data,
                                       lambda c: c.data.startswith("change"), state=FSM_newbie_questioning.commit_data)
    dp.register_message_handler(change_name, state=FSM_newbie_questioning.change_name)
    dp.register_message_handler(change_bday, state=FSM_newbie_questioning.change_bday)
    dp.register_message_handler(change_phone, state=FSM_newbie_questioning.change_phone)
    dp.register_message_handler(change_email, state=FSM_newbie_questioning.change_email)
    dp.register_message_handler(change_hobbie, state=FSM_newbie_questioning.change_hobbie)
